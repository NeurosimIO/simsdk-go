syntax = "proto3";

package simsdkrpc;

option go_package = "github.com/neurosimio/simsdk/rpc/simsdkrpc;simsdkrpc";
option csharp_namespace = "Simsdkrpc";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service PluginService {
  rpc GetManifest(ManifestRequest) returns (ManifestResponse);
  rpc CreateComponentInstance(CreateComponentRequest) returns (CreateComponentResponse);
  rpc DestroyComponentInstance(google.protobuf.StringValue) returns (google.protobuf.Empty);
  rpc HandleMessage(SimMessage) returns (MessageResponse);
  rpc MessageStream(stream PluginMessageEnvelope) returns (stream PluginMessageEnvelope);
}
 
message ManifestRequest {}

message ManifestResponse {
  Manifest manifest = 1;
}

message Manifest {
  string name = 1;
  string version = 2;
  repeated MessageType message_types = 3;
  repeated ControlFunctionType control_functions = 4;
  repeated ComponentType component_types = 5;
  repeated TransportType transport_types = 6;
}

message MessageType {
  string id = 1;
  string display_name = 2;
  string description = 3;
  repeated FieldSpec fields = 4;
}

message ControlFunctionType {
  string id = 1;
  string display_name = 2;
  string description = 3;
  repeated FieldSpec fields = 4;
}

message ComponentType {
  string id = 1;
  string display_name = 2;
  bool internal = 3;
  string description = 4;
   bool supports_multiple_instances = 5;
}

message TransportType {
  string id = 1;
  string display_name = 2;
  string description = 3;
  bool internal = 4;
}

message FieldSpec {
  string name = 1;
  FieldType type = 2;
  bool required = 3;
  repeated string enum_values = 4;
  bool repeated = 5;
  string description = 6;
  FieldType subtype = 7;
  repeated FieldSpec object_fields = 8;
}

enum FieldType {
  FIELD_TYPE_UNSPECIFIED = 0;
  STRING = 1;
  INT = 2;
  UINT = 3;
  FLOAT = 4;
  BOOL = 5;
  ENUM = 6;
  TIMESTAMP = 7;
  REPEATED = 8;
  OBJECT = 9;
}

message CreateComponentRequest {
  string component_type = 1;
  string component_id = 2;
  map<string, string> parameters = 3;
}

message CreateComponentResponse {}

message SimMessage {
  string message_type = 1;
  string message_id = 2;
  string component_id = 3;
  bytes payload = 4;
  map<string, string> metadata = 5;
}

message MessageResponse {
  repeated SimMessage outbound_messages = 1;
}

message PluginMessageEnvelope {
  oneof content {
    SimMessage sim_message = 1;
    PluginAck ack = 2;
    PluginNak nak = 3;
    PluginInit init = 4;
    PluginShutdown shutdown = 5;
  }
}

message PluginInit {
  string component_id = 1;
}

message PluginShutdown {
  string reason = 1;
}

message PluginAck {
  string message_id = 1;
}

message PluginNak {
  string message_id = 1;
  string error_message = 2;
}

message DestroyComponentRequest {
  string component_id = 1;
}

message DestroyComponentResponse {
  bool success = 1;
}